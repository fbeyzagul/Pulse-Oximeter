
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/89d234b1-64ae-4477-b891-6d6b97bc8412 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float spo2;
  bool buzzer;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include "MAX30100_PulseOximeter.h"
#define REPORTING_PERIOD_MS 1000

// Pin definitions
#define BUTTON_PIN 17
#define POWER_LED_PIN 12
#define BUZZER_PIN 5
#define VIBRATION_MOTOR_PIN 18


// Create PulseOximeter instance
PulseOximeter pox;
   
// Timer variables
uint32_t tsLastReport = 0;

// Callback function for sensor data
void onBeatDetected() {
    // Serial.println(F("Beat!")); // Comment out to save space
}

void setup() {
  // Initialize serial and wait for port to open: 
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
    
    // Initialize MAX30100 sensor
    Serial.print(F("Initializing Pulse Oximeter.."));
    if (!pox.begin()) {
        Serial.println(F("FAILED"));
        for(;;);
    } else {
        Serial.println(F("SUCCESS"));
    }
    
    pox.setOnBeatDetectedCallback(onBeatDetected);


    // Initialize Pins
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(VIBRATION_MOTOR_PIN, OUTPUT);
    pinMode(POWER_LED_PIN, OUTPUT);
    pinMode(BUTTON_PIN, INPUT);

    // Turn on power LED
    digitalWrite(POWER_LED_PIN, HIGH);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
   pox.update();
    
    // Report sensor data periodically
    if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        Serial.print(F("Heart rate:"));
        Serial.print(pox.getHeartRate());
        Serial.print(F(" bpm / SpO2:"));
        Serial.print(pox.getSpO2());
        Serial.println(F(" %"));


        // Check oxygen saturation level
        if (pox.getSpO2() < 60) {
            // Trigger buzzer and vibration motor
            digitalWrite(BUZZER_PIN, HIGH);
            digitalWrite(VIBRATION_MOTOR_PIN, HIGH);
        } else {
            digitalWrite(BUZZER_PIN, LOW);
            digitalWrite(VIBRATION_MOTOR_PIN, LOW);
        }

        tsLastReport = millis();
    }

    // Handle button press
    if (digitalRead(BUTTON_PIN) == LOW) {
        digitalWrite(VIBRATION_MOTOR_PIN, HIGH);
        digitalWrite(BUZZER_PIN, HIGH);
    } else {
        digitalWrite(VIBRATION_MOTOR_PIN, LOW);
        digitalWrite(BUZZER_PIN, LOW);
    }

    delay(100);
  // Your code here 
  
  
}



/*
  Since Buzzer is READ_WRITE variable, onBuzzerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBuzzerChange()  {
  // Add your code here to act upon Buzzer change
}
